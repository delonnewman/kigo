(def identity
  (lambda (x) x))

(def always
  (lambda (x)
    (lambda () x)))

(def tap
  (lambda (f)
    (lambda (x)
      (f x)
      x)))

(def add1
  (lambda (x) (+ 1 x)))

(def sub1
  (lambda (x) (- x 1)))

(def second
  (lambda (col)
          (first (rest col))))

(def third
  (lambda (col)
          (first (rest (rest col)))))

(def let
  (macro (bindings *body)
         (cons (cons 'lambda (cons (map first bindings) body)) (map second bindings))))

(def comment
  (macro (*xs) nil))

(def nil?
  (lambda (x) (send x :nil?)))

(def zero?
  (lambda (x) (send x :zero?)))

(def even?
  (lambda (x) (send x :even?)))

(def odd?
  (lambda (x) (send x :odd?)))

(def string?
  (lambda (x) (send x :is_a? String)))

(def symbol?
  (lambda (x) (send x :is_a? Symbol)))

(def keyword?
  (lambda (x) (send x :is_a? Kigo::Keyword)))

(def array?
  (lambda (x) (send x :is_a? Array)))

(def hash?
  (lambda (x) (send x :is_a? Hash)))

(def list?
  (lambda (x) (send x :is_a? Kigo::Cons)))

(def numeric?
  (lambda (x) (send x :is_a? Numeric)))

(def integer?
  (lambda (x) (send x :is_a? Integer)))

(def float?
  (lambda (x) (send x :is_a? Float)))

(def rational?
  (lambda (x) (send x :is_a? Rational)))

(def ->string
  (lambda (x) (send x :to_s)))

(def ->integer
  (lambda (x) (send x :to_i)))

(def ->rational
  (lambda (x) (send x :to_r)))

(def ->float
  (lambda (x) (send x :to_f)))

(def ->array
  (lambda (x) (send x :to_a)))

(def ->hash
  (lambda (x) (send x :to_h)))

(def count
  (lambda (col) (send col :count)))

(def length
  (lambda (col) (send col :length)))

(def size
  (lambda (col) (send col :size)))

(def str
  (lambda (*args) (send args :join "")))

(def inspect
  (lambda (x) (send x :inspect)))

(def map
  (lambda (f col)
    (cond
      (empty? col) col
      else (cons (f (first col)) (map f (rest col))))))

(def reduce-1
  (lambda (f col init)
     (cond
       (empty? col) init
       else (f (reduce-1 f (rest col) init) (first col)))))

(def reduce
  (lambda (*args)
    (let ((argc (size args)))
      (cond
        (= 2 argc)
          (let ((col (second args)))
            (reduce-1 (first args) (rest col) (first col)))
        (= 3 argc) (reduce-1 (first args) (second args) (third args))
        else (Kernel.raise ArgumentError (str "wrong number of arguments expected 2 or 3, got " argc))))))

(def filter
  (lambda (f col)
    (reduce-1
      (lambda (new-col x)
        (pp new-col x)
        (cond (f x)
          (cons x new-col)
          else new-col)) (rest col) (first col))))

(def range
  (lambda (*args)
     (cond (= 1 (size args)) (Range.new 0 (first args))
           (= 2 (size args)) (Range.new (first args) (second args) 1)
           (= 3 (size args)) (send (Range.new (first args) (second args)) :step (third args))
           else (Kernel.raise ArgumentError (str "wrong number of arguments expected 1, 2 or 3 got " (size args))))))

(def format
  (lambda (format-str *args)
     (Kernel.format format-str *args)))